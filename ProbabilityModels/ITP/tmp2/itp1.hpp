// Code generated by Stan version 2.19.1

#include <stan/model/model_header.hpp>

namespace itp1_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "/Users/rob/.julia/dev/DynamicHMCModels/scripts/ProbabilityModels/ITP/tmp/itp1.stan");
    reader.add_event(106, 104, "end", "/Users/rob/.julia/dev/DynamicHMCModels/scripts/ProbabilityModels/ITP/tmp/itp1.stan");
    return reader;
}

class itp1_model : public prob_grad {
private:
        int N1;
        int N2;
        int T;
        int K;
        int D;
        std::vector<int> domains;
        std::vector<matrix_d> Y1;
        std::vector<matrix_d> Y2;
        row_vector_d times;
        int N;
        int Tm1;
        int ind;
        row_vector_d delta_times;
        matrix_d domain_map;
public:
    itp1_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    itp1_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "itp1_model_namespace::itp1_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "N1", "int", context__.to_vec());
            N1 = int(0);
            vals_i__ = context__.vals_i("N1");
            pos__ = 0;
            N1 = vals_i__[pos__++];

            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "N2", "int", context__.to_vec());
            N2 = int(0);
            vals_i__ = context__.vals_i("N2");
            pos__ = 0;
            N2 = vals_i__[pos__++];

            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "T", "int", context__.to_vec());
            T = int(0);
            vals_i__ = context__.vals_i("T");
            pos__ = 0;
            T = vals_i__[pos__++];

            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];

            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "D", "int", context__.to_vec());
            D = int(0);
            vals_i__ = context__.vals_i("D");
            pos__ = 0;
            D = vals_i__[pos__++];

            current_statement_begin__ = 7;
            validate_non_negative_index("domains", "D", D);
            context__.validate_dims("data initialization", "domains", "int", context__.to_vec(D));
            domains = std::vector<int>(D, int(0));
            vals_i__ = context__.vals_i("domains");
            pos__ = 0;
            size_t domains_k_0_max__ = D;
            for (size_t k_0__ = 0; k_0__ < domains_k_0_max__; ++k_0__) {
                domains[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 9;
            validate_non_negative_index("Y1", "K", K);
            validate_non_negative_index("Y1", "T", T);
            validate_non_negative_index("Y1", "N1", N1);
            context__.validate_dims("data initialization", "Y1", "matrix_d", context__.to_vec(N1,K,T));
            Y1 = std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >(N1, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(K, T));
            vals_r__ = context__.vals_r("Y1");
            pos__ = 0;
            size_t Y1_j_2_max__ = T;
            size_t Y1_j_1_max__ = K;
            size_t Y1_k_0_max__ = N1;
            for (size_t j_2__ = 0; j_2__ < Y1_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Y1_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < Y1_k_0_max__; ++k_0__) {
                        Y1[k_0__](j_1__, j_2__) = vals_r__[pos__++];
                    }
                }
            }

            current_statement_begin__ = 11;
            validate_non_negative_index("Y2", "K", K);
            validate_non_negative_index("Y2", "T", T);
            validate_non_negative_index("Y2", "N2", N2);
            context__.validate_dims("data initialization", "Y2", "matrix_d", context__.to_vec(N2,K,T));
            Y2 = std::vector<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> >(N2, Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(K, T));
            vals_r__ = context__.vals_r("Y2");
            pos__ = 0;
            size_t Y2_j_2_max__ = T;
            size_t Y2_j_1_max__ = K;
            size_t Y2_k_0_max__ = N2;
            for (size_t j_2__ = 0; j_2__ < Y2_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Y2_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < Y2_k_0_max__; ++k_0__) {
                        Y2[k_0__](j_1__, j_2__) = vals_r__[pos__++];
                    }
                }
            }

            current_statement_begin__ = 12;
            validate_non_negative_index("times", "T", T);
            context__.validate_dims("data initialization", "times", "row_vector_d", context__.to_vec(T));
            times = Eigen::Matrix<double, 1, Eigen::Dynamic>(T);
            vals_r__ = context__.vals_r("times");
            pos__ = 0;
            size_t times_j_1_max__ = T;
            for (size_t j_1__ = 0; j_1__ < times_j_1_max__; ++j_1__) {
                times(j_1__) = vals_r__[pos__++];
            }


            // initialize transformed data variables
            current_statement_begin__ = 16;
            N = int(0);
            stan::math::fill(N, std::numeric_limits<int>::min());
            stan::math::assign(N,(N1 + N2));

            current_statement_begin__ = 17;
            Tm1 = int(0);
            stan::math::fill(Tm1, std::numeric_limits<int>::min());
            stan::math::assign(Tm1,(T - 1));

            current_statement_begin__ = 18;
            ind = int(0);
            stan::math::fill(ind, std::numeric_limits<int>::min());
            stan::math::assign(ind,0);

            current_statement_begin__ = 19;
            validate_non_negative_index("delta_times", "Tm1", Tm1);
            delta_times = Eigen::Matrix<double, 1, Eigen::Dynamic>(Tm1);
            stan::math::fill(delta_times, DUMMY_VAR__);
            stan::math::assign(delta_times,subtract(stan::model::rvalue(times, stan::model::cons_list(stan::model::index_min_max(2, T), stan::model::nil_index_list()), "times"), stan::model::rvalue(times, stan::model::cons_list(stan::model::index_min_max(1, Tm1), stan::model::nil_index_list()), "times")));

            current_statement_begin__ = 20;
            validate_non_negative_index("domain_map", "K", K);
            validate_non_negative_index("domain_map", "D", D);
            domain_map = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(K, D);
            stan::math::fill(domain_map, DUMMY_VAR__);
            stan::math::assign(domain_map,rep_matrix(0, K, D));

            // execute transformed data statements
            current_statement_begin__ = 21;
            for (int d = 1; d <= D; ++d) {

                current_statement_begin__ = 22;
                for (int k = 1; k <= get_base1(domains, d, "domains", 1); ++k) {

                    current_statement_begin__ = 23;
                    stan::math::assign(ind, (ind + 1));
                    current_statement_begin__ = 24;
                    stan::model::assign(domain_map, 
                                stan::model::cons_list(stan::model::index_uni(ind), stan::model::cons_list(stan::model::index_uni(d), stan::model::nil_index_list())), 
                                1, 
                                "assigning variable domain_map");
                }
            }

            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 29;
            validate_non_negative_index("muh", "2", 2);
            num_params_r__ += (1 * 2);
            current_statement_begin__ = 30;
            num_params_r__ += 1;
            current_statement_begin__ = 31;
            validate_non_negative_index("kappa", "K", K);
            num_params_r__ += K;
            current_statement_begin__ = 32;
            validate_non_negative_index("theta", "K", K);
            num_params_r__ += K;
            current_statement_begin__ = 33;
            validate_non_negative_index("L", "K", K);
            validate_non_negative_index("L", "K", K);
            num_params_r__ += ((K * (K - 1)) / 2);
            current_statement_begin__ = 34;
            validate_non_negative_index("muraw", "D", D);
            validate_non_negative_index("muraw", "2", 2);
            num_params_r__ += (D * 2);
            current_statement_begin__ = 35;
            validate_non_negative_index("betaraw", "K", K);
            validate_non_negative_index("betaraw", "2", 2);
            num_params_r__ += (K * 2);
            current_statement_begin__ = 36;
            num_params_r__ += 1;
            current_statement_begin__ = 37;
            num_params_r__ += 1;
            current_statement_begin__ = 38;
            validate_non_negative_index("sigma", "K", K);
            num_params_r__ += K;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~itp1_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        current_statement_begin__ = 29;
        if (!(context__.contains_r("muh")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable muh missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("muh");
        pos__ = 0U;
        validate_non_negative_index("muh", "2", 2);
        context__.validate_dims("parameter initialization", "muh", "double", context__.to_vec(2));
        std::vector<double> muh(2, double(0));
        size_t muh_k_0_max__ = 2;
        for (size_t k_0__ = 0; k_0__ < muh_k_0_max__; ++k_0__) {
            muh[k_0__] = vals_r__[pos__++];
        }
        size_t muh_i_0_max__ = 2;
        for (size_t i_0__ = 0; i_0__ < muh_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(muh[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable muh: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 30;
        if (!(context__.contains_r("rho")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable rho missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("rho");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "rho", "double", context__.to_vec());
        double rho(0);
        rho = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(-(1), 1, rho);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable rho: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 31;
        if (!(context__.contains_r("kappa")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable kappa missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("kappa");
        pos__ = 0U;
        validate_non_negative_index("kappa", "K", K);
        context__.validate_dims("parameter initialization", "kappa", "vector_d", context__.to_vec(K));
        Eigen::Matrix<double, Eigen::Dynamic, 1> kappa(K);
        size_t kappa_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < kappa_j_1_max__; ++j_1__) {
            kappa(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, kappa);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable kappa: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 32;
        if (!(context__.contains_r("theta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta");
        pos__ = 0U;
        validate_non_negative_index("theta", "K", K);
        context__.validate_dims("parameter initialization", "theta", "vector_d", context__.to_vec(K));
        Eigen::Matrix<double, Eigen::Dynamic, 1> theta(K);
        size_t theta_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
            theta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(theta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 33;
        if (!(context__.contains_r("L")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable L missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("L");
        pos__ = 0U;
        validate_non_negative_index("L", "K", K);
        validate_non_negative_index("L", "K", K);
        context__.validate_dims("parameter initialization", "L", "matrix_d", context__.to_vec(K,K));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> L(K, K);
        size_t L_j_2_max__ = K;
        size_t L_j_1_max__ = K;
        for (size_t j_2__ = 0; j_2__ < L_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_j_1_max__; ++j_1__) {
                L(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.cholesky_factor_corr_unconstrain(L);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable L: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 34;
        if (!(context__.contains_r("muraw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable muraw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("muraw");
        pos__ = 0U;
        validate_non_negative_index("muraw", "D", D);
        validate_non_negative_index("muraw", "2", 2);
        context__.validate_dims("parameter initialization", "muraw", "vector_d", context__.to_vec(2,D));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > muraw(2, Eigen::Matrix<double, Eigen::Dynamic, 1>(D));
        size_t muraw_j_1_max__ = D;
        size_t muraw_k_0_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < muraw_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < muraw_k_0_max__; ++k_0__) {
                muraw[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t muraw_i_0_max__ = 2;
        for (size_t i_0__ = 0; i_0__ < muraw_i_0_max__; ++i_0__) {
            try {
                writer__.vector_unconstrain(muraw[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable muraw: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 35;
        if (!(context__.contains_r("betaraw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable betaraw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("betaraw");
        pos__ = 0U;
        validate_non_negative_index("betaraw", "K", K);
        validate_non_negative_index("betaraw", "2", 2);
        context__.validate_dims("parameter initialization", "betaraw", "vector_d", context__.to_vec(2,K));
        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > betaraw(2, Eigen::Matrix<double, Eigen::Dynamic, 1>(K));
        size_t betaraw_j_1_max__ = K;
        size_t betaraw_k_0_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < betaraw_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < betaraw_k_0_max__; ++k_0__) {
                betaraw[k_0__](j_1__) = vals_r__[pos__++];
            }
        }
        size_t betaraw_i_0_max__ = 2;
        for (size_t i_0__ = 0; i_0__ < betaraw_i_0_max__; ++i_0__) {
            try {
                writer__.vector_unconstrain(betaraw[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable betaraw: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 36;
        if (!(context__.contains_r("sigma_beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_beta");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_beta", "double", context__.to_vec());
        double sigma_beta(0);
        sigma_beta = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 37;
        if (!(context__.contains_r("sigma_h")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_h missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_h");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_h", "double", context__.to_vec());
        double sigma_h(0);
        sigma_h = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_h);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_h: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 38;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        validate_non_negative_index("sigma", "K", K);
        context__.validate_dims("parameter initialization", "sigma", "vector_d", context__.to_vec(K));
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma(K);
        size_t sigma_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
            sigma(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

            // model parameters
            current_statement_begin__ = 29;
            std::vector<local_scalar_t__> muh;
            size_t muh_d_0_max__ = 2;
            muh.reserve(muh_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < muh_d_0_max__; ++d_0__) {
                if (jacobian__)
                    muh.push_back(in__.scalar_constrain(lp__));
                else
                    muh.push_back(in__.scalar_constrain());
            }

            current_statement_begin__ = 30;
            local_scalar_t__ rho;
            (void) rho;  // dummy to suppress unused var warning
            if (jacobian__)
                rho = in__.scalar_lub_constrain(-(1), 1, lp__);
            else
                rho = in__.scalar_lub_constrain(-(1), 1);

            current_statement_begin__ = 31;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> kappa;
            (void) kappa;  // dummy to suppress unused var warning
            if (jacobian__)
                kappa = in__.vector_lb_constrain(0, K, lp__);
            else
                kappa = in__.vector_lb_constrain(0, K);

            current_statement_begin__ = 32;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> theta;
            (void) theta;  // dummy to suppress unused var warning
            if (jacobian__)
                theta = in__.vector_constrain(K, lp__);
            else
                theta = in__.vector_constrain(K);

            current_statement_begin__ = 33;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L;
            (void) L;  // dummy to suppress unused var warning
            if (jacobian__)
                L = in__.cholesky_factor_corr_constrain(K, lp__);
            else
                L = in__.cholesky_factor_corr_constrain(K);

            current_statement_begin__ = 34;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > muraw;
            size_t muraw_d_0_max__ = 2;
            muraw.reserve(muraw_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < muraw_d_0_max__; ++d_0__) {
                if (jacobian__)
                    muraw.push_back(in__.vector_constrain(D, lp__));
                else
                    muraw.push_back(in__.vector_constrain(D));
            }

            current_statement_begin__ = 35;
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > betaraw;
            size_t betaraw_d_0_max__ = 2;
            betaraw.reserve(betaraw_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < betaraw_d_0_max__; ++d_0__) {
                if (jacobian__)
                    betaraw.push_back(in__.vector_constrain(K, lp__));
                else
                    betaraw.push_back(in__.vector_constrain(K));
            }

            current_statement_begin__ = 36;
            local_scalar_t__ sigma_beta;
            (void) sigma_beta;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_beta = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_beta = in__.scalar_lb_constrain(0);

            current_statement_begin__ = 37;
            local_scalar_t__ sigma_h;
            (void) sigma_h;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_h = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_h = in__.scalar_lb_constrain(0);

            current_statement_begin__ = 38;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.vector_lb_constrain(0, K, lp__);
            else
                sigma = in__.vector_lb_constrain(0, K);

            // model body
            {
            current_statement_begin__ = 41;
            local_scalar_t__ scaledrho(DUMMY_VAR__);
            (void) scaledrho;  // dummy to suppress unused var warning
            stan::math::initialize(scaledrho, DUMMY_VAR__);
            stan::math::fill(scaledrho, DUMMY_VAR__);
            stan::math::assign(scaledrho,((0.5 * rho) + 0.5));

            current_statement_begin__ = 42;
            validate_non_negative_index("mu_beta", "K", K);
            validate_non_negative_index("mu_beta", "2", 2);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > mu_beta(2, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(K));
            stan::math::initialize(mu_beta, DUMMY_VAR__);
            stan::math::fill(mu_beta, DUMMY_VAR__);

            current_statement_begin__ = 43;
            validate_non_negative_index("beta", "K", K);
            validate_non_negative_index("beta", "2", 2);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>  > beta(2, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(K));
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);

            current_statement_begin__ = 44;
            validate_non_negative_index("temp", "Tm1", Tm1);
            Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> temp(Tm1);
            stan::math::initialize(temp, DUMMY_VAR__);
            stan::math::fill(temp, DUMMY_VAR__);

            current_statement_begin__ = 45;
            validate_non_negative_index("temp2", "T", T);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> temp2(T);
            stan::math::initialize(temp2, DUMMY_VAR__);
            stan::math::fill(temp2, DUMMY_VAR__);

            current_statement_begin__ = 46;
            validate_non_negative_index("AR_diag", "Tm1", Tm1);
            Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> AR_diag(Tm1);
            stan::math::initialize(AR_diag, DUMMY_VAR__);
            stan::math::fill(AR_diag, DUMMY_VAR__);

            current_statement_begin__ = 47;
            validate_non_negative_index("nAR_offdiag", "Tm1", Tm1);
            Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> nAR_offdiag(Tm1);
            stan::math::initialize(nAR_offdiag, DUMMY_VAR__);
            stan::math::fill(nAR_offdiag, DUMMY_VAR__);

            current_statement_begin__ = 48;
            validate_non_negative_index("kappa_time", "K", K);
            validate_non_negative_index("kappa_time", "T", T);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> kappa_time(K, T);
            stan::math::initialize(kappa_time, DUMMY_VAR__);
            stan::math::fill(kappa_time, DUMMY_VAR__);

            current_statement_begin__ = 49;
            validate_non_negative_index("delta", "K", K);
            validate_non_negative_index("delta", "T", T);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> delta(K, T);
            stan::math::initialize(delta, DUMMY_VAR__);
            stan::math::fill(delta, DUMMY_VAR__);

            current_statement_begin__ = 50;
            validate_non_negative_index("SLdelta", "K", K);
            validate_non_negative_index("SLdelta", "T", T);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> SLdelta(K, T);
            stan::math::initialize(SLdelta, DUMMY_VAR__);
            stan::math::fill(SLdelta, DUMMY_VAR__);

            current_statement_begin__ = 51;
            validate_non_negative_index("SLdeltaAR", "K", K);
            validate_non_negative_index("SLdeltaAR", "Tm1", Tm1);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> SLdeltaAR(K, Tm1);
            stan::math::initialize(SLdeltaAR, DUMMY_VAR__);
            stan::math::fill(SLdeltaAR, DUMMY_VAR__);

            current_statement_begin__ = 52;
            validate_non_negative_index("itp_expected_value", "K", K);
            validate_non_negative_index("itp_expected_value", "T", T);
            validate_non_negative_index("itp_expected_value", "2", 2);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>  > itp_expected_value(2, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic>(K, T));
            stan::math::initialize(itp_expected_value, DUMMY_VAR__);
            stan::math::fill(itp_expected_value, DUMMY_VAR__);

            current_statement_begin__ = 53;
            validate_non_negative_index("SL", "K", K);
            validate_non_negative_index("SL", "K", K);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> SL(K, K);
            stan::math::initialize(SL, DUMMY_VAR__);
            stan::math::fill(SL, DUMMY_VAR__);
            stan::math::assign(SL,diag_pre_multiply(sigma, L));


            current_statement_begin__ = 55;
            lp_accum__.add(beta_log<propto__>(scaledrho, 2, 2));
            current_statement_begin__ = 56;
            lp_accum__.add(gamma_log<propto__>(kappa, 0.1, 0.1));
            current_statement_begin__ = 57;
            lp_accum__.add(gamma_log<propto__>(sigma, 1.5, 0.25));
            current_statement_begin__ = 58;
            lp_accum__.add(normal_log<propto__>(theta, 0, 10));
            current_statement_begin__ = 59;
            lp_accum__.add(lkj_corr_cholesky_log<propto__>(L, 2));
            current_statement_begin__ = 60;
            for (int i = 1; i <= 2; ++i) {

                current_statement_begin__ = 61;
                lp_accum__.add(normal_log<propto__>(get_base1(muh, i, "muh", 1), 0, 10));
                current_statement_begin__ = 62;
                lp_accum__.add(normal_log<propto__>(get_base1(muraw, i, "muraw", 1), 0, 1));
                current_statement_begin__ = 63;
                lp_accum__.add(normal_log<propto__>(get_base1(betaraw, i, "betaraw", 1), 0, 1));
                current_statement_begin__ = 64;
                stan::model::assign(mu_beta, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            multiply(domain_map, add(get_base1(muh, i, "muh", 1), multiply(get_base1(muraw, i, "muraw", 1), sigma_h))), 
                            "assigning variable mu_beta");
                current_statement_begin__ = 65;
                stan::model::assign(beta, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            add(get_base1(mu_beta, i, "mu_beta", 1), multiply(get_base1(betaraw, i, "betaraw", 1), sigma_beta)), 
                            "assigning variable beta");
            }
            current_statement_begin__ = 67;
            lp_accum__.add(normal_log<propto__>(sigma_h, 0, 10));
            current_statement_begin__ = 68;
            lp_accum__.add(normal_log<propto__>(sigma_beta, 0, 10));
            current_statement_begin__ = 70;
            if (as_bool(logical_gt(rho, 0))) {

                current_statement_begin__ = 71;
                stan::math::assign(temp, stan::math::exp(multiply(delta_times, stan::math::log(rho))));
            } else if (as_bool(logical_eq(rho, 0))) {

                current_statement_begin__ = 73;
                stan::math::assign(temp, rep_row_vector(0, Tm1));
            } else {

                current_statement_begin__ = 75;
                stan::math::assign(temp, minus(stan::math::exp(multiply(delta_times, stan::math::log(-(rho))))));
            }
            current_statement_begin__ = 78;
            stan::math::assign(AR_diag, inv_sqrt(subtract(1, elt_multiply(temp, temp))));
            current_statement_begin__ = 79;
            stan::math::assign(nAR_offdiag, elt_multiply(AR_diag, temp));
            current_statement_begin__ = 81;
            stan::math::assign(kappa_time, stan::math::expm1(multiply(multiply(-(1), kappa), times)));
            current_statement_begin__ = 82;
            for (int i = 1; i <= 2; ++i) {

                current_statement_begin__ = 83;
                stan::model::assign(itp_expected_value, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            subtract(rep_matrix(theta, T), elt_multiply(rep_matrix(get_base1(beta, i, "beta", 1), T), kappa_time)), 
                            "assigning variable itp_expected_value");
            }
            current_statement_begin__ = 88;
            lp_accum__.add((N * ((K * sum(stan::math::log(AR_diag))) - (T * log_determinant(SL)))));
            current_statement_begin__ = 90;
            for (int n = 1; n <= N1; ++n) {

                current_statement_begin__ = 91;
                stan::math::assign(delta, subtract(get_base1(Y1, n, "Y1", 1), get_base1(itp_expected_value, 1, "itp_expected_value", 1)));
                current_statement_begin__ = 92;
                stan::math::assign(SLdelta, mdivide_left_tri_low(SL, delta));
                current_statement_begin__ = 93;
                lp_accum__.add((-(0.5) * dot_self(stan::model::rvalue(SLdelta, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "SLdelta"))));
                current_statement_begin__ = 94;
                stan::math::assign(SLdeltaAR, subtract(elt_multiply(stan::model::rvalue(SLdelta, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(2, T), stan::model::nil_index_list())), "SLdelta"), rep_matrix(AR_diag, K)), elt_multiply(stan::model::rvalue(SLdelta, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(1, Tm1), stan::model::nil_index_list())), "SLdelta"), rep_matrix(nAR_offdiag, K))));
                current_statement_begin__ = 95;
                lp_accum__.add((-(0.5) * sum(columns_dot_self(SLdeltaAR))));
            }
            current_statement_begin__ = 97;
            for (int n = 1; n <= N2; ++n) {

                current_statement_begin__ = 98;
                stan::math::assign(delta, subtract(get_base1(Y2, n, "Y2", 1), get_base1(itp_expected_value, 2, "itp_expected_value", 1)));
                current_statement_begin__ = 99;
                stan::math::assign(SLdelta, mdivide_left_tri_low(SL, delta));
                current_statement_begin__ = 100;
                lp_accum__.add((-(0.5) * dot_self(stan::model::rvalue(SLdelta, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "SLdelta"))));
                current_statement_begin__ = 101;
                stan::math::assign(SLdeltaAR, subtract(elt_multiply(stan::model::rvalue(SLdelta, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(2, T), stan::model::nil_index_list())), "SLdelta"), rep_matrix(AR_diag, K)), elt_multiply(stan::model::rvalue(SLdelta, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(1, Tm1), stan::model::nil_index_list())), "SLdelta"), rep_matrix(nAR_offdiag, K))));
                current_statement_begin__ = 102;
                lp_accum__.add((-(0.5) * sum(columns_dot_self(SLdeltaAR))));
            }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("muh");
        names__.push_back("rho");
        names__.push_back("kappa");
        names__.push_back("theta");
        names__.push_back("L");
        names__.push_back("muraw");
        names__.push_back("betaraw");
        names__.push_back("sigma_beta");
        names__.push_back("sigma_h");
        names__.push_back("sigma");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dims__.push_back(D);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "itp1_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning

        // read-transform, write parameters
        std::vector<double> muh;
        size_t muh_d_0_max__ = 2;
        muh.reserve(muh_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < muh_d_0_max__; ++d_0__) {
            muh.push_back(in__.scalar_constrain());
        }
        size_t muh_k_0_max__ = 2;
        for (size_t k_0__ = 0; k_0__ < muh_k_0_max__; ++k_0__) {
            vars__.push_back(muh[k_0__]);
        }

        double rho = in__.scalar_lub_constrain(-(1), 1);
        vars__.push_back(rho);

        Eigen::Matrix<double, Eigen::Dynamic, 1> kappa = in__.vector_lb_constrain(0, K);
        size_t kappa_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < kappa_j_1_max__; ++j_1__) {
            vars__.push_back(kappa(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> theta = in__.vector_constrain(K);
        size_t theta_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
            vars__.push_back(theta(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> L = in__.cholesky_factor_corr_constrain(K);
        size_t L_j_2_max__ = K;
        size_t L_j_1_max__ = K;
        for (size_t j_2__ = 0; j_2__ < L_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_j_1_max__; ++j_1__) {
                vars__.push_back(L(j_1__, j_2__));
            }
        }

        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > muraw;
        size_t muraw_d_0_max__ = 2;
        muraw.reserve(muraw_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < muraw_d_0_max__; ++d_0__) {
            muraw.push_back(in__.vector_constrain(D));
        }
        size_t muraw_j_1_max__ = D;
        size_t muraw_k_0_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < muraw_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < muraw_k_0_max__; ++k_0__) {
                vars__.push_back(muraw[k_0__](j_1__));
            }
        }

        std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > betaraw;
        size_t betaraw_d_0_max__ = 2;
        betaraw.reserve(betaraw_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < betaraw_d_0_max__; ++d_0__) {
            betaraw.push_back(in__.vector_constrain(K));
        }
        size_t betaraw_j_1_max__ = K;
        size_t betaraw_k_0_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < betaraw_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < betaraw_k_0_max__; ++k_0__) {
                vars__.push_back(betaraw[k_0__](j_1__));
            }
        }

        double sigma_beta = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_beta);

        double sigma_h = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_h);

        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma = in__.vector_lb_constrain(0, K);
        size_t sigma_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
            vars__.push_back(sigma(j_1__));
        }

        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        if (!include_tparams__ && !include_gqs__) return;

        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "itp1_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t muh_k_0_max__ = 2;
        for (size_t k_0__ = 0; k_0__ < muh_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "muh" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho";
        param_names__.push_back(param_name_stream__.str());
        size_t kappa_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < kappa_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "kappa" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t theta_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t L_j_2_max__ = K;
        size_t L_j_1_max__ = K;
        for (size_t j_2__ = 0; j_2__ < L_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < L_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "L" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t muraw_j_1_max__ = D;
        size_t muraw_k_0_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < muraw_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < muraw_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "muraw" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t betaraw_j_1_max__ = K;
        size_t betaraw_k_0_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < betaraw_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < betaraw_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "betaraw" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_beta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_h";
        param_names__.push_back(param_name_stream__.str());
        size_t sigma_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t muh_k_0_max__ = 2;
        for (size_t k_0__ = 0; k_0__ < muh_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "muh" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "rho";
        param_names__.push_back(param_name_stream__.str());
        size_t kappa_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < kappa_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "kappa" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t theta_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t L_j_1_max__ = ((K * (K - 1)) / 2);
        for (size_t j_1__ = 0; j_1__ < L_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "L" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t muraw_j_1_max__ = D;
        size_t muraw_k_0_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < muraw_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < muraw_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "muraw" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t betaraw_j_1_max__ = K;
        size_t betaraw_k_0_max__ = 2;
        for (size_t j_1__ = 0; j_1__ < betaraw_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < betaraw_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "betaraw" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_beta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_h";
        param_names__.push_back(param_name_stream__.str());
        size_t sigma_j_1_max__ = K;
        for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }

        if (!include_gqs__) return;
    }

}; // model

}  // namespace

typedef itp1_model_namespace::itp1_model stan_model;

